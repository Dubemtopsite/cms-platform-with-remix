
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PlatformCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlatformCategory
 * 
 */
export type PlatformCategoryModel = runtime.Types.Result.DefaultSelection<Prisma.$PlatformCategoryPayload>

export type AggregatePlatformCategory = {
  _count: PlatformCategoryCountAggregateOutputType | null
  _min: PlatformCategoryMinAggregateOutputType | null
  _max: PlatformCategoryMaxAggregateOutputType | null
}

export type PlatformCategoryMinAggregateOutputType = {
  id: string | null
  categoryName: string | null
  categorySlug: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlatformCategoryMaxAggregateOutputType = {
  id: string | null
  categoryName: string | null
  categorySlug: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlatformCategoryCountAggregateOutputType = {
  id: number
  categoryName: number
  categorySlug: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PlatformCategoryMinAggregateInputType = {
  id?: true
  categoryName?: true
  categorySlug?: true
  createdAt?: true
  updatedAt?: true
}

export type PlatformCategoryMaxAggregateInputType = {
  id?: true
  categoryName?: true
  categorySlug?: true
  createdAt?: true
  updatedAt?: true
}

export type PlatformCategoryCountAggregateInputType = {
  id?: true
  categoryName?: true
  categorySlug?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PlatformCategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlatformCategory to aggregate.
   */
  where?: Prisma.PlatformCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlatformCategories to fetch.
   */
  orderBy?: Prisma.PlatformCategoryOrderByWithRelationInput | Prisma.PlatformCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlatformCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlatformCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlatformCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlatformCategories
  **/
  _count?: true | PlatformCategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlatformCategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlatformCategoryMaxAggregateInputType
}

export type GetPlatformCategoryAggregateType<T extends PlatformCategoryAggregateArgs> = {
      [P in keyof T & keyof AggregatePlatformCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlatformCategory[P]>
    : Prisma.GetScalarType<T[P], AggregatePlatformCategory[P]>
}




export type PlatformCategoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlatformCategoryWhereInput
  orderBy?: Prisma.PlatformCategoryOrderByWithAggregationInput | Prisma.PlatformCategoryOrderByWithAggregationInput[]
  by: Prisma.PlatformCategoryScalarFieldEnum[] | Prisma.PlatformCategoryScalarFieldEnum
  having?: Prisma.PlatformCategoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlatformCategoryCountAggregateInputType | true
  _min?: PlatformCategoryMinAggregateInputType
  _max?: PlatformCategoryMaxAggregateInputType
}

export type PlatformCategoryGroupByOutputType = {
  id: string
  categoryName: string
  categorySlug: string
  createdAt: Date
  updatedAt: Date
  _count: PlatformCategoryCountAggregateOutputType | null
  _min: PlatformCategoryMinAggregateOutputType | null
  _max: PlatformCategoryMaxAggregateOutputType | null
}

type GetPlatformCategoryGroupByPayload<T extends PlatformCategoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlatformCategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlatformCategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlatformCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlatformCategoryGroupByOutputType[P]>
      }
    >
  >



export type PlatformCategoryWhereInput = {
  AND?: Prisma.PlatformCategoryWhereInput | Prisma.PlatformCategoryWhereInput[]
  OR?: Prisma.PlatformCategoryWhereInput[]
  NOT?: Prisma.PlatformCategoryWhereInput | Prisma.PlatformCategoryWhereInput[]
  id?: Prisma.UuidFilter<"PlatformCategory"> | string
  categoryName?: Prisma.StringFilter<"PlatformCategory"> | string
  categorySlug?: Prisma.StringFilter<"PlatformCategory"> | string
  createdAt?: Prisma.DateTimeFilter<"PlatformCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlatformCategory"> | Date | string
  article?: Prisma.PlatformArticleListRelationFilter
}

export type PlatformCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  categoryName?: Prisma.SortOrder
  categorySlug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  article?: Prisma.PlatformArticleOrderByRelationAggregateInput
}

export type PlatformCategoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PlatformCategoryWhereInput | Prisma.PlatformCategoryWhereInput[]
  OR?: Prisma.PlatformCategoryWhereInput[]
  NOT?: Prisma.PlatformCategoryWhereInput | Prisma.PlatformCategoryWhereInput[]
  categoryName?: Prisma.StringFilter<"PlatformCategory"> | string
  categorySlug?: Prisma.StringFilter<"PlatformCategory"> | string
  createdAt?: Prisma.DateTimeFilter<"PlatformCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlatformCategory"> | Date | string
  article?: Prisma.PlatformArticleListRelationFilter
}, "id">

export type PlatformCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  categoryName?: Prisma.SortOrder
  categorySlug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PlatformCategoryCountOrderByAggregateInput
  _max?: Prisma.PlatformCategoryMaxOrderByAggregateInput
  _min?: Prisma.PlatformCategoryMinOrderByAggregateInput
}

export type PlatformCategoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlatformCategoryScalarWhereWithAggregatesInput | Prisma.PlatformCategoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlatformCategoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlatformCategoryScalarWhereWithAggregatesInput | Prisma.PlatformCategoryScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PlatformCategory"> | string
  categoryName?: Prisma.StringWithAggregatesFilter<"PlatformCategory"> | string
  categorySlug?: Prisma.StringWithAggregatesFilter<"PlatformCategory"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PlatformCategory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PlatformCategory"> | Date | string
}

export type PlatformCategoryCreateInput = {
  id?: string
  categoryName: string
  categorySlug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  article?: Prisma.PlatformArticleCreateNestedManyWithoutCategoryInput
}

export type PlatformCategoryUncheckedCreateInput = {
  id?: string
  categoryName: string
  categorySlug: string
  createdAt?: Date | string
  updatedAt?: Date | string
  article?: Prisma.PlatformArticleUncheckedCreateNestedManyWithoutCategoryInput
}

export type PlatformCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryName?: Prisma.StringFieldUpdateOperationsInput | string
  categorySlug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  article?: Prisma.PlatformArticleUpdateManyWithoutCategoryNestedInput
}

export type PlatformCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryName?: Prisma.StringFieldUpdateOperationsInput | string
  categorySlug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  article?: Prisma.PlatformArticleUncheckedUpdateManyWithoutCategoryNestedInput
}

export type PlatformCategoryCreateManyInput = {
  id?: string
  categoryName: string
  categorySlug: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlatformCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryName?: Prisma.StringFieldUpdateOperationsInput | string
  categorySlug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlatformCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryName?: Prisma.StringFieldUpdateOperationsInput | string
  categorySlug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlatformCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  categoryName?: Prisma.SortOrder
  categorySlug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlatformCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  categoryName?: Prisma.SortOrder
  categorySlug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlatformCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  categoryName?: Prisma.SortOrder
  categorySlug?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlatformCategoryScalarRelationFilter = {
  is?: Prisma.PlatformCategoryWhereInput
  isNot?: Prisma.PlatformCategoryWhereInput
}

export type PlatformCategoryCreateNestedOneWithoutArticleInput = {
  create?: Prisma.XOR<Prisma.PlatformCategoryCreateWithoutArticleInput, Prisma.PlatformCategoryUncheckedCreateWithoutArticleInput>
  connectOrCreate?: Prisma.PlatformCategoryCreateOrConnectWithoutArticleInput
  connect?: Prisma.PlatformCategoryWhereUniqueInput
}

export type PlatformCategoryUpdateOneRequiredWithoutArticleNestedInput = {
  create?: Prisma.XOR<Prisma.PlatformCategoryCreateWithoutArticleInput, Prisma.PlatformCategoryUncheckedCreateWithoutArticleInput>
  connectOrCreate?: Prisma.PlatformCategoryCreateOrConnectWithoutArticleInput
  upsert?: Prisma.PlatformCategoryUpsertWithoutArticleInput
  connect?: Prisma.PlatformCategoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlatformCategoryUpdateToOneWithWhereWithoutArticleInput, Prisma.PlatformCategoryUpdateWithoutArticleInput>, Prisma.PlatformCategoryUncheckedUpdateWithoutArticleInput>
}

export type PlatformCategoryCreateWithoutArticleInput = {
  id?: string
  categoryName: string
  categorySlug: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlatformCategoryUncheckedCreateWithoutArticleInput = {
  id?: string
  categoryName: string
  categorySlug: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlatformCategoryCreateOrConnectWithoutArticleInput = {
  where: Prisma.PlatformCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.PlatformCategoryCreateWithoutArticleInput, Prisma.PlatformCategoryUncheckedCreateWithoutArticleInput>
}

export type PlatformCategoryUpsertWithoutArticleInput = {
  update: Prisma.XOR<Prisma.PlatformCategoryUpdateWithoutArticleInput, Prisma.PlatformCategoryUncheckedUpdateWithoutArticleInput>
  create: Prisma.XOR<Prisma.PlatformCategoryCreateWithoutArticleInput, Prisma.PlatformCategoryUncheckedCreateWithoutArticleInput>
  where?: Prisma.PlatformCategoryWhereInput
}

export type PlatformCategoryUpdateToOneWithWhereWithoutArticleInput = {
  where?: Prisma.PlatformCategoryWhereInput
  data: Prisma.XOR<Prisma.PlatformCategoryUpdateWithoutArticleInput, Prisma.PlatformCategoryUncheckedUpdateWithoutArticleInput>
}

export type PlatformCategoryUpdateWithoutArticleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryName?: Prisma.StringFieldUpdateOperationsInput | string
  categorySlug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlatformCategoryUncheckedUpdateWithoutArticleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryName?: Prisma.StringFieldUpdateOperationsInput | string
  categorySlug?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PlatformCategoryCountOutputType
 */

export type PlatformCategoryCountOutputType = {
  article: number
}

export type PlatformCategoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  article?: boolean | PlatformCategoryCountOutputTypeCountArticleArgs
}

/**
 * PlatformCategoryCountOutputType without action
 */
export type PlatformCategoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategoryCountOutputType
   */
  select?: Prisma.PlatformCategoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PlatformCategoryCountOutputType without action
 */
export type PlatformCategoryCountOutputTypeCountArticleArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlatformArticleWhereInput
}


export type PlatformCategorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  categoryName?: boolean
  categorySlug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  article?: boolean | Prisma.PlatformCategory$articleArgs<ExtArgs>
  _count?: boolean | Prisma.PlatformCategoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["platformCategory"]>

export type PlatformCategorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  categoryName?: boolean
  categorySlug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["platformCategory"]>

export type PlatformCategorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  categoryName?: boolean
  categorySlug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["platformCategory"]>

export type PlatformCategorySelectScalar = {
  id?: boolean
  categoryName?: boolean
  categorySlug?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PlatformCategoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "categoryName" | "categorySlug" | "createdAt" | "updatedAt", ExtArgs["result"]["platformCategory"]>
export type PlatformCategoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  article?: boolean | Prisma.PlatformCategory$articleArgs<ExtArgs>
  _count?: boolean | Prisma.PlatformCategoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type PlatformCategoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PlatformCategoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PlatformCategoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlatformCategory"
  objects: {
    article: Prisma.$PlatformArticlePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    categoryName: string
    categorySlug: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["platformCategory"]>
  composites: {}
}

export type PlatformCategoryGetPayload<S extends boolean | null | undefined | PlatformCategoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload, S>

export type PlatformCategoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlatformCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlatformCategoryCountAggregateInputType | true
  }

export interface PlatformCategoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlatformCategory'], meta: { name: 'PlatformCategory' } }
  /**
   * Find zero or one PlatformCategory that matches the filter.
   * @param {PlatformCategoryFindUniqueArgs} args - Arguments to find a PlatformCategory
   * @example
   * // Get one PlatformCategory
   * const platformCategory = await prisma.platformCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlatformCategoryFindUniqueArgs>(args: Prisma.SelectSubset<T, PlatformCategoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlatformCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlatformCategoryFindUniqueOrThrowArgs} args - Arguments to find a PlatformCategory
   * @example
   * // Get one PlatformCategory
   * const platformCategory = await prisma.platformCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlatformCategoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlatformCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlatformCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlatformCategoryFindFirstArgs} args - Arguments to find a PlatformCategory
   * @example
   * // Get one PlatformCategory
   * const platformCategory = await prisma.platformCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlatformCategoryFindFirstArgs>(args?: Prisma.SelectSubset<T, PlatformCategoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlatformCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlatformCategoryFindFirstOrThrowArgs} args - Arguments to find a PlatformCategory
   * @example
   * // Get one PlatformCategory
   * const platformCategory = await prisma.platformCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlatformCategoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlatformCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlatformCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlatformCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlatformCategories
   * const platformCategories = await prisma.platformCategory.findMany()
   * 
   * // Get first 10 PlatformCategories
   * const platformCategories = await prisma.platformCategory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const platformCategoryWithIdOnly = await prisma.platformCategory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlatformCategoryFindManyArgs>(args?: Prisma.SelectSubset<T, PlatformCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlatformCategory.
   * @param {PlatformCategoryCreateArgs} args - Arguments to create a PlatformCategory.
   * @example
   * // Create one PlatformCategory
   * const PlatformCategory = await prisma.platformCategory.create({
   *   data: {
   *     // ... data to create a PlatformCategory
   *   }
   * })
   * 
   */
  create<T extends PlatformCategoryCreateArgs>(args: Prisma.SelectSubset<T, PlatformCategoryCreateArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlatformCategories.
   * @param {PlatformCategoryCreateManyArgs} args - Arguments to create many PlatformCategories.
   * @example
   * // Create many PlatformCategories
   * const platformCategory = await prisma.platformCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlatformCategoryCreateManyArgs>(args?: Prisma.SelectSubset<T, PlatformCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlatformCategories and returns the data saved in the database.
   * @param {PlatformCategoryCreateManyAndReturnArgs} args - Arguments to create many PlatformCategories.
   * @example
   * // Create many PlatformCategories
   * const platformCategory = await prisma.platformCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlatformCategories and only return the `id`
   * const platformCategoryWithIdOnly = await prisma.platformCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlatformCategoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlatformCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlatformCategory.
   * @param {PlatformCategoryDeleteArgs} args - Arguments to delete one PlatformCategory.
   * @example
   * // Delete one PlatformCategory
   * const PlatformCategory = await prisma.platformCategory.delete({
   *   where: {
   *     // ... filter to delete one PlatformCategory
   *   }
   * })
   * 
   */
  delete<T extends PlatformCategoryDeleteArgs>(args: Prisma.SelectSubset<T, PlatformCategoryDeleteArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlatformCategory.
   * @param {PlatformCategoryUpdateArgs} args - Arguments to update one PlatformCategory.
   * @example
   * // Update one PlatformCategory
   * const platformCategory = await prisma.platformCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlatformCategoryUpdateArgs>(args: Prisma.SelectSubset<T, PlatformCategoryUpdateArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlatformCategories.
   * @param {PlatformCategoryDeleteManyArgs} args - Arguments to filter PlatformCategories to delete.
   * @example
   * // Delete a few PlatformCategories
   * const { count } = await prisma.platformCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlatformCategoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlatformCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlatformCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlatformCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlatformCategories
   * const platformCategory = await prisma.platformCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlatformCategoryUpdateManyArgs>(args: Prisma.SelectSubset<T, PlatformCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlatformCategories and returns the data updated in the database.
   * @param {PlatformCategoryUpdateManyAndReturnArgs} args - Arguments to update many PlatformCategories.
   * @example
   * // Update many PlatformCategories
   * const platformCategory = await prisma.platformCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlatformCategories and only return the `id`
   * const platformCategoryWithIdOnly = await prisma.platformCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlatformCategoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlatformCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlatformCategory.
   * @param {PlatformCategoryUpsertArgs} args - Arguments to update or create a PlatformCategory.
   * @example
   * // Update or create a PlatformCategory
   * const platformCategory = await prisma.platformCategory.upsert({
   *   create: {
   *     // ... data to create a PlatformCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlatformCategory we want to update
   *   }
   * })
   */
  upsert<T extends PlatformCategoryUpsertArgs>(args: Prisma.SelectSubset<T, PlatformCategoryUpsertArgs<ExtArgs>>): Prisma.Prisma__PlatformCategoryClient<runtime.Types.Result.GetResult<Prisma.$PlatformCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlatformCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlatformCategoryCountArgs} args - Arguments to filter PlatformCategories to count.
   * @example
   * // Count the number of PlatformCategories
   * const count = await prisma.platformCategory.count({
   *   where: {
   *     // ... the filter for the PlatformCategories we want to count
   *   }
   * })
  **/
  count<T extends PlatformCategoryCountArgs>(
    args?: Prisma.Subset<T, PlatformCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlatformCategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlatformCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlatformCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlatformCategoryAggregateArgs>(args: Prisma.Subset<T, PlatformCategoryAggregateArgs>): Prisma.PrismaPromise<GetPlatformCategoryAggregateType<T>>

  /**
   * Group by PlatformCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlatformCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlatformCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlatformCategoryGroupByArgs['orderBy'] }
      : { orderBy?: PlatformCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlatformCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatformCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlatformCategory model
 */
readonly fields: PlatformCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlatformCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlatformCategoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  article<T extends Prisma.PlatformCategory$articleArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlatformCategory$articleArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlatformArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlatformCategory model
 */
export interface PlatformCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"PlatformCategory", 'String'>
  readonly categoryName: Prisma.FieldRef<"PlatformCategory", 'String'>
  readonly categorySlug: Prisma.FieldRef<"PlatformCategory", 'String'>
  readonly createdAt: Prisma.FieldRef<"PlatformCategory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PlatformCategory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PlatformCategory findUnique
 */
export type PlatformCategoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PlatformCategory to fetch.
   */
  where: Prisma.PlatformCategoryWhereUniqueInput
}

/**
 * PlatformCategory findUniqueOrThrow
 */
export type PlatformCategoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PlatformCategory to fetch.
   */
  where: Prisma.PlatformCategoryWhereUniqueInput
}

/**
 * PlatformCategory findFirst
 */
export type PlatformCategoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PlatformCategory to fetch.
   */
  where?: Prisma.PlatformCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlatformCategories to fetch.
   */
  orderBy?: Prisma.PlatformCategoryOrderByWithRelationInput | Prisma.PlatformCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlatformCategories.
   */
  cursor?: Prisma.PlatformCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlatformCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlatformCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlatformCategories.
   */
  distinct?: Prisma.PlatformCategoryScalarFieldEnum | Prisma.PlatformCategoryScalarFieldEnum[]
}

/**
 * PlatformCategory findFirstOrThrow
 */
export type PlatformCategoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PlatformCategory to fetch.
   */
  where?: Prisma.PlatformCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlatformCategories to fetch.
   */
  orderBy?: Prisma.PlatformCategoryOrderByWithRelationInput | Prisma.PlatformCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlatformCategories.
   */
  cursor?: Prisma.PlatformCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlatformCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlatformCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlatformCategories.
   */
  distinct?: Prisma.PlatformCategoryScalarFieldEnum | Prisma.PlatformCategoryScalarFieldEnum[]
}

/**
 * PlatformCategory findMany
 */
export type PlatformCategoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PlatformCategories to fetch.
   */
  where?: Prisma.PlatformCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlatformCategories to fetch.
   */
  orderBy?: Prisma.PlatformCategoryOrderByWithRelationInput | Prisma.PlatformCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlatformCategories.
   */
  cursor?: Prisma.PlatformCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlatformCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlatformCategories.
   */
  skip?: number
  distinct?: Prisma.PlatformCategoryScalarFieldEnum | Prisma.PlatformCategoryScalarFieldEnum[]
}

/**
 * PlatformCategory create
 */
export type PlatformCategoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * The data needed to create a PlatformCategory.
   */
  data: Prisma.XOR<Prisma.PlatformCategoryCreateInput, Prisma.PlatformCategoryUncheckedCreateInput>
}

/**
 * PlatformCategory createMany
 */
export type PlatformCategoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlatformCategories.
   */
  data: Prisma.PlatformCategoryCreateManyInput | Prisma.PlatformCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PlatformCategory createManyAndReturn
 */
export type PlatformCategoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * The data used to create many PlatformCategories.
   */
  data: Prisma.PlatformCategoryCreateManyInput | Prisma.PlatformCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PlatformCategory update
 */
export type PlatformCategoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * The data needed to update a PlatformCategory.
   */
  data: Prisma.XOR<Prisma.PlatformCategoryUpdateInput, Prisma.PlatformCategoryUncheckedUpdateInput>
  /**
   * Choose, which PlatformCategory to update.
   */
  where: Prisma.PlatformCategoryWhereUniqueInput
}

/**
 * PlatformCategory updateMany
 */
export type PlatformCategoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlatformCategories.
   */
  data: Prisma.XOR<Prisma.PlatformCategoryUpdateManyMutationInput, Prisma.PlatformCategoryUncheckedUpdateManyInput>
  /**
   * Filter which PlatformCategories to update
   */
  where?: Prisma.PlatformCategoryWhereInput
  /**
   * Limit how many PlatformCategories to update.
   */
  limit?: number
}

/**
 * PlatformCategory updateManyAndReturn
 */
export type PlatformCategoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * The data used to update PlatformCategories.
   */
  data: Prisma.XOR<Prisma.PlatformCategoryUpdateManyMutationInput, Prisma.PlatformCategoryUncheckedUpdateManyInput>
  /**
   * Filter which PlatformCategories to update
   */
  where?: Prisma.PlatformCategoryWhereInput
  /**
   * Limit how many PlatformCategories to update.
   */
  limit?: number
}

/**
 * PlatformCategory upsert
 */
export type PlatformCategoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * The filter to search for the PlatformCategory to update in case it exists.
   */
  where: Prisma.PlatformCategoryWhereUniqueInput
  /**
   * In case the PlatformCategory found by the `where` argument doesn't exist, create a new PlatformCategory with this data.
   */
  create: Prisma.XOR<Prisma.PlatformCategoryCreateInput, Prisma.PlatformCategoryUncheckedCreateInput>
  /**
   * In case the PlatformCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlatformCategoryUpdateInput, Prisma.PlatformCategoryUncheckedUpdateInput>
}

/**
 * PlatformCategory delete
 */
export type PlatformCategoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
  /**
   * Filter which PlatformCategory to delete.
   */
  where: Prisma.PlatformCategoryWhereUniqueInput
}

/**
 * PlatformCategory deleteMany
 */
export type PlatformCategoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlatformCategories to delete
   */
  where?: Prisma.PlatformCategoryWhereInput
  /**
   * Limit how many PlatformCategories to delete.
   */
  limit?: number
}

/**
 * PlatformCategory.article
 */
export type PlatformCategory$articleArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformArticle
   */
  select?: Prisma.PlatformArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformArticle
   */
  omit?: Prisma.PlatformArticleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformArticleInclude<ExtArgs> | null
  where?: Prisma.PlatformArticleWhereInput
  orderBy?: Prisma.PlatformArticleOrderByWithRelationInput | Prisma.PlatformArticleOrderByWithRelationInput[]
  cursor?: Prisma.PlatformArticleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlatformArticleScalarFieldEnum | Prisma.PlatformArticleScalarFieldEnum[]
}

/**
 * PlatformCategory without action
 */
export type PlatformCategoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlatformCategory
   */
  select?: Prisma.PlatformCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlatformCategory
   */
  omit?: Prisma.PlatformCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlatformCategoryInclude<ExtArgs> | null
}
